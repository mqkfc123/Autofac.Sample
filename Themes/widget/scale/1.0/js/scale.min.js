(function (window, undefined) {
    var document = window.document, support = { transform3d: ("WebKitCSSMatrix" in window && "m11" in new WebKitCSSMatrix()), touch: ("ontouchstart" in window) }; function getTranslate(x, y) { var distX = x, distY = y; return support.transform3d ? "translate3d(" + distX + "px, " + distY + "px, 0)" : "translate(" + distX + "px, " + distY + "px)" } function getPage(event, page) { return support.touch ? event.changedTouches[0][page] : event[page] } var ImagesZoom = function () { }; ImagesZoom.prototype = {
        init: function (param) { var self = this, params = param || {}, imgIndex = 0; var imgList = document.querySelectorAll(params.elem + " img"), zoomMask = document.querySelector(".imgzoom-pack"), zoomImg = document.querySelector(".imgzoom-pack .imgzoom-img img"), zoomClose = document.querySelector(".imgzoom-pack .imgzoom-x"), zoomDel = document.querySelector(".imgzoom-pack .imgzoom-del"), zoomPrev = document.querySelector(".imgzoom-pack .imgzoom-prev"), zoomNext = document.querySelector(".imgzoom-pack .imgzoom-next"), aoomTurn = document.querySelector(".imgzoom-pack .imgzoom-turn"), imgSrc = ""; self.buffMove = 3; self.buffScale = 2; self.finger = false; self._destroy(); zoomClose.addEventListener("click", function () { zoomMask.style.cssText = "display:none"; zoomImg.src = ""; zoomImg.style.cssText = ""; self._destroy(); document.removeEventListener("touchmove", self.eventStop, false) }, false); zoomPrev.addEventListener("click", function () { var isli = imgIndex.parent().is("li"); if (isli) { if (imgIndex.parent().prev().is("li")) { imgIndex = imgIndex.parent().prev().find("img"); zoomImg.src = imgIndex.attr("src") } else { if (imgIndex.parents(".img-scale").prevAll(".img-scale:first").is(":visible")) { if (imgIndex.parents(".img-scale").prevAll(".img-scale:first").find("li:first").hasClass("file-btn")) { return } else { if (imgIndex.parents(".img-scale").prevAll(".img-scale:first").find("li:last").hasClass("file-btn")) { imgIndex = imgIndex.parents(".img-scale").prevAll(".img-scale:first").find("li:last").prev().find("img") } else { imgIndex = imgIndex.parents(".img-scale").prevAll(".img-scale:first").find("li:last").find("img") } } zoomImg.src = imgIndex.attr("src") } } } else { var objectindex; $(".img-scale").each(function (index, value) { if (imgIndex.parents(".img-scale").is(value)) { objectindex = index } }); if (imgIndex.prev().attr("src")) { imgIndex = imgIndex.prev(); zoomImg.src = imgIndex.attr("src") } else { if (objectindex - 1 >= 0) { imgIndex = $(".img-scale").eq(objectindex - 1).find("img:last"); zoomImg.src = imgIndex.attr("src") } } } document.removeEventListener("touchmove", self.eventStop, false) }, false); zoomNext.addEventListener("click", function () { var isli = imgIndex.parent().is("li"); if (isli) { if (imgIndex.parent().next().is("li") && !imgIndex.parent().next().hasClass("file-btn")) { imgIndex = imgIndex.parent().next().find("img"); zoomImg.src = imgIndex.attr("src") } else { if (imgIndex.parents(".img-scale").nextAll(".img-scale:first").is(":visible")) { if (imgIndex.parents(".img-scale").nextAll(".img-scale:first").find("li:first").hasClass("file-btn")) { return } else { imgIndex = imgIndex.parents(".img-scale").nextAll(".img-scale:first").find("li:first").find("img") } zoomImg.src = imgIndex.attr("src") } } } else { var objectindex; $(".img-scale").each(function (index, value) { if (imgIndex.parents(".img-scale").is(value)) { objectindex = index } }); if (imgIndex.next().attr("src")) { imgIndex = imgIndex.next(); zoomImg.src = imgIndex.attr("src") } else { if (objectindex + 1 < $(".img-scale").length) { imgIndex = $(".img-scale").eq(objectindex + 1).find("img:first"); zoomImg.src = imgIndex.attr("src") } } } document.removeEventListener("touchmove", self.eventStop, false) }, false); zoomDel.addEventListener("click", function () { zoomMask.style.cssText = "display:none"; zoomImg.src = ""; zoomImg.style.cssText = ""; var imgLi = document.querySelectorAll(params.elem + " li"); if (params.delBack) { params.delBack(imgIndex) } self._destroy(); document.removeEventListener("touchmove", self.eventStop, false) }, false); var current = 0; if (aoomTurn) { aoomTurn.addEventListener("click", function () { var imgLi = $(".imgzoom-img").find("img"); var img = $(imgLi).get(0); current = (current + 90) % 360; img.style.transform = "rotate(" + current + "deg)" }, false) } for (var len = imgList.length, i = 0; i < len; i++) { imgList[i].addEventListener("click", function () { imgIndex = $(this); imgSrc = this.getAttribute("src"); zoomMask.style.cssText = "display:block"; zoomImg.src = imgSrc; zoomImg.onload = function () { zoomImg.style.cssText = "margin-top:-" + (zoomImg.offsetHeight / 2) + "px"; document.addEventListener("touchmove", self.eventStop, false); self.imgBaseWidth = zoomImg.offsetWidth; self.imgBaseHeight = zoomImg.offsetHeight; self.addEventStart({ wrapX: zoomMask.offsetWidth, wrapY: zoomMask.offsetHeight, mapX: zoomImg.width, mapY: zoomImg.height }) } }, false) } }, addEventStart: function (param) {
            var self = this, params = param || {}; self.element = document.querySelector(".imgzoom-pack img"); self.wrapX = params.wrapX || 0; self.wrapY = params.wrapY || 0; self.mapX = params.mapX || 0; self.mapY = params.mapY || 0; self.outDistY = (self.mapY - self.wrapY) / 2; self.width = self.mapX - self.wrapX; self.height = self.mapY - self.wrapY; self.element.addEventListener("touchstart", function (e) { self._touchstart(e) }, false); self.element.addEventListener("touchmove", function (e) {
                self._touchmove(e)
            }, false); self.element.addEventListener("touchend", function (e) { self._touchend(e) }, false)
        }, _destroy: function () { this.distX = 0; this.distY = 0; this.newX = 0; this.newY = 0 }, _changeData: function () { this.mapX = this.element.offsetWidth; this.mapY = this.element.offsetHeight; this.width = this.mapX - this.wrapX; this.height = this.mapY - this.wrapY }, _touchstart: function (e) { var self = this; e.preventDefault(); var touchTarget = e.targetTouches.length; self._changeData(); if (touchTarget == 1) { self.basePageX = getPage(e, "pageX"); self.basePageY = getPage(e, "pageY"); self.finger = false } else { self.finger = true; self.startFingerDist = self.getTouchDist(e).dist; self.startFingerX = self.getTouchDist(e).x; self.startFingerY = self.getTouchDist(e).y } }, _touchmove: function (e) { var self = this; e.preventDefault(); e.stopPropagation(); var touchTarget = e.targetTouches.length; if (touchTarget == 1 && !self.finger) { self._move(e) } if (touchTarget >= 2) { self._zoom(e) } }, _touchend: function (e) { var self = this; self._changeData(); if (self.finger) { self.distX = -self.imgNewX; self.distY = -self.imgNewY } if (self.distX > 0) { self.newX = 0 } else { if (self.distX <= 0 && self.distX >= -self.width) { self.newX = self.distX; self.newY = self.distY } else { if (self.distX < -self.width) { self.newX = -self.width } } } self.reset() }, _move: function (e) { var self = this, pageX = getPage(e, "pageX"), pageY = getPage(e, "pageY"); self.distX = (pageX - self.basePageX) + self.newX; self.distY = (pageY - self.basePageY) + self.newY; if (self.distX > 0) { self.moveX = Math.round(self.distX / self.buffMove) } else { if (self.distX <= 0 && self.distX >= -self.width) { self.moveX = self.distX } else { if (self.distX < -self.width) { self.moveX = -self.width + Math.round((self.distX + self.width) / self.buffMove) } } } self.movePos(); self.finger = false }, _zoom: function (e) { var self = this; var nowFingerDist = self.getTouchDist(e).dist, ratio = nowFingerDist / self.startFingerDist, imgWidth = Math.round(self.mapX * ratio), imgHeight = Math.round(self.mapY * ratio); self.imgNewX = Math.round(self.startFingerX * ratio - self.startFingerX - self.newX * ratio); self.imgNewY = Math.round((self.startFingerY * ratio - self.startFingerY) / 2 - self.newY * ratio); if (imgWidth >= self.imgBaseWidth) { self.element.style.width = imgWidth + "px"; self.refresh(-self.imgNewX, -self.imgNewY, "0s", "ease"); self.finger = true } else { if (imgWidth < self.imgBaseWidth) { self.element.style.width = self.imgBaseWidth + "px" } } self.finger = true }, movePos: function () { var self = this; if (self.height < 0) { if (self.element.offsetWidth == self.imgBaseWidth) { self.moveY = Math.round(self.distY / self.buffMove) } else { var moveTop = Math.round((self.element.offsetHeight - self.imgBaseHeight) / 2); self.moveY = -moveTop + Math.round((self.distY + moveTop) / self.buffMove) } } else { var a = Math.round((self.wrapY - self.imgBaseHeight) / 2), b = self.element.offsetHeight - self.wrapY + Math.round(self.wrapY - self.imgBaseHeight) / 2; if (self.distY >= -a) { self.moveY = Math.round((self.distY + a) / self.buffMove) - a } else { if (self.distY <= -b) { self.moveY = Math.round((self.distY + b) / self.buffMove) - b } else { self.moveY = self.distY } } } self.refresh(self.moveX, self.moveY, "0s", "ease") }, reset: function () { var self = this, hideTime = ".2s"; if (self.height < 0) { self.newY = -Math.round(self.element.offsetHeight - self.imgBaseHeight) / 2 } else { var a = Math.round((self.wrapY - self.imgBaseHeight) / 2), b = self.element.offsetHeight - self.wrapY + Math.round(self.wrapY - self.imgBaseHeight) / 2; if (self.distY >= -a) { self.newY = -a } else { if (self.distY <= -b) { self.newY = -b } else { self.newY = self.distY } } } self.refresh(self.newX, self.newY, hideTime, "ease-in-out") }, refresh: function (x, y, timer, type) { this.element.style.webkitTransitionProperty = "-webkit-transform"; this.element.style.webkitTransitionDuration = timer; this.element.style.webkitTransitionTimingFunction = type; this.element.style.webkitTransform = getTranslate(x, y) }, getTouchDist: function (e) { var x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, result = {}; x1 = e.touches[0].pageX; x2 = e.touches[1].pageX; y1 = e.touches[0].pageY - document.body.scrollTop; y2 = e.touches[1].pageY - document.body.scrollTop; if (!x1 || !x2) { return } if (x1 <= x2) { x3 = (x2 - x1) / 2 + x1 } else { x3 = (x1 - x2) / 2 + x2 } if (y1 <= y2) { y3 = (y2 - y1) / 2 + y1 } else { y3 = (y1 - y2) / 2 + y2 } result = { dist: Math.round(Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))), x: Math.round(x3), y: Math.round(y3) }; return result }, eventStop: function (e) { e.preventDefault(); e.stopPropagation() }
    }; window.ImagesZoom = new ImagesZoom()
})(this);